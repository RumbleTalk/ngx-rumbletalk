{"version":3,"sources":["ng://ngx-rumbletalk/lib/ngx-rumbletalk.service.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.component.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.module.ts"],"names":["NgxRumbletalkService","prototype","address","hash","this","http","get","pipe","map","data","Injectable","args","providedIn","HttpClient","server","messageInterval","protocol","baseWebUrl","NgxRumbletalkComponent","ngOnInit","_this","service","subscribe","iframeElement","nativeElement","src","addListeners","instantiateQuery","window","addEventListener","info","bind","event","isFinite","clearInterval","reload","xhr","XMLHttpRequest","open","onreadystatechange","readyState","response","JSON","parse","responseText","status","HTMLIFrameElement","location","href","e","send","setInterval","query","origin_1","target","contentWindow","postMessage","ignore","validateOrigin","origin","test","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ViewChild","Input","NgxRumbletalkModule","NgModule","declarations","imports","HttpClientModule","exports"],"mappings":"kZAAA,IAAAA,GAWEA,EAAAC,UAAAC,QAAA,SAAQC,GACN,OAAOC,KAAKC,KACTC,IAAY,sDAAsDH,GAClEI,KAAKC,EAAAA,IAAG,SAACC,GAAQ,OAAAA,EAAc,gCATrCC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALLC,EAAAA,4IAQP,SAAAb,EAAoBK,GAAAD,KAAAC,KAAAA,MCMlBS,EACAC,EALEC,EAAW,WACXC,EAAa,8BAMnBC,GAqBEA,EAAAjB,UAAAkB,SAAA,WAAA,IAAAC,EAAAhB,KACEA,KAAKiB,QAAQnB,QAAQE,KAAKD,MAAMmB,UAAS,SAACpB,GACxCY,EAASZ,EACTkB,EAAKG,cAAcC,cAAcC,IAAM,WAAWvB,EAAO,IAAIkB,EAAKjB,KAAI,IACtEiB,EAAKM,eACLN,EAAKO,sBAOTT,EAAAjB,UAAAyB,aAAA,WACEE,OAAOC,iBAAiB,UAAWzB,KAAK0B,KAAKC,KAAK3B,OAAO,IAO3Dc,EAAAjB,UAAA6B,KAAA,SAAKE,GACCC,SAASD,EAAMvB,MACjByB,cAAcnB,GACiB,iBAAfiB,EAAMvB,MAClBuB,EAAMvB,KAAK0B,QACb/B,KAAK+B,UAQXjB,EAAAjB,UAAAkC,OAAA,WAAA,IAAAf,EAAAhB,KACQgC,EAAM,IAAIC,eAEhBD,EAAIE,KAAK,MAAOrB,EA9DO,2BA8D2Bb,KAAKD,MAAM,GAE7DiC,EAAIG,mBAAkB,WACpB,GAAuB,IAAnBH,EAAII,WAIR,QACQC,EAAWC,KAAKC,MAAMP,EAAIQ,cAEhC,GAAIH,EAASI,OAAQ,CACnB/B,EAAS2B,EAASvC,YACZA,EAAUc,EAAWF,EAAS,IAAMM,EAAKjB,KAAO,IAElDiB,EAAKG,cAAcC,yBAAyBsB,kBAC9C1B,EAAKG,cAAcC,cAAcC,IAAMvB,EAEvCkB,EAAKG,cAAcC,cAAcuB,SAASC,KAAO9C,EAGnDkB,EAAKO,oBAEP,MAAOsB,GACPF,SAASZ,WAIbC,EAAIc,QAMNhC,EAAAjB,UAAA0B,iBAAA,WACEZ,EAAkBoC,YAAY/C,KAAKgD,MAAMrB,KAAK3B,MAAO,MAMvDc,EAAAjB,UAAAmD,MAAA,WACE,QAEMC,EADAC,OAAM,EAKRD,EAFEjD,KAAKmB,cAAcC,yBAAyBsB,mBAC9CQ,EAASlD,KAAKmB,cAAcC,cAAc+B,cACjCvC,EAAWF,IAEpBwC,EAASlD,KAAKmB,cAAcC,cACnBP,GAGXqC,EAAOE,YAAY,UAAWH,GAC9B,MAAOI,MAQXvC,EAAAjB,UAAAyD,eAAA,SAAeC,GACb,MAAO,gDAAgDC,KAAKD,wBAxH/DE,EAAAA,UAASlD,KAAA,CAAC,CACTmD,SAAU,iBACVC,SAAA,mJAEAC,gBAAiBC,EAAAA,wBAAwBC,oJAtBlClE,4CAyBNmE,EAAAA,UAASxD,KAAA,CAAC,4BAEVyD,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,oBACAA,EAAAA,SA8GHlD,GA3GE,SAAAA,EAAoBG,GAAAjB,KAAAiB,QAAAA,ECjCtB,IAAAgD,uBAICC,EAAAA,SAAQ3D,KAAA,CAAC,CACR4D,aAAc,CAACrD,GACfsD,QAAS,CAACC,EAAAA,kBACVC,QAAS,CAACxD,OAEsBmD,GALlC,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxRumbletalkService {\n  constructor(private http: HttpClient) {}\n\n  address(hash: string): Observable<string> {\n    return this.http\n      .get<string>(`https://www.rumbletalk.com/client/service.php?hash=${hash}`)\n      .pipe(map(data => data['address']));\n  }\n}\n","import { NgxRumbletalkService } from './ngx-rumbletalk.service';\nimport {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\n// import { DomSanitizer } from '@angular/platform-browser';\n\nconst protocol = 'https://';\nconst baseWebUrl = 'https://www.rumbletalk.com/';\nconst serviceRelativeUrl = 'client/service.php?hash=';\n// const server = 'stagging5.rumbletalk.net:4433';\nlet server;\nlet messageInterval: any;\n\n@Component({\n  selector: 'ngx-rumbletalk',\n  templateUrl: './ngx-rumbletalk.component.html',\n  styleUrls: ['./ngx-rumbletalk.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxRumbletalkComponent implements OnInit {\n  @ViewChild('iframe') iframeElement: ElementRef;\n  // @Input() public src: string;\n  @Input() public floating: boolean;\n  @Input() public width: string;\n  @Input() public height: string;\n  @Input() public hash: string;\n\n  // constructor(private sanitizer: DomSanitizer) {}\n  constructor(private service: NgxRumbletalkService) {}\n\n  // get safeSrc(): any {\n  //   return this.sanitizer.bypassSecurityTrustResourceUrl(this.src);\n  // }\n\n  ngOnInit() {\n    this.service.address(this.hash).subscribe(address => {\n      server = address;\n      this.iframeElement.nativeElement.src = `https://${address}/${this.hash}/`;\n      this.addListeners();\n      this.instantiateQuery();\n    });\n  }\n\n  /**\n   * add the event listeners based on the embed type and device\n   */\n  addListeners(): void {\n    window.addEventListener('message', this.info.bind(this), false);\n  }\n\n  /**\n   * handles postMessage requests\n   * @param event - the event object\n   */\n  info(event) {\n    if (isFinite(event.data)) {\n      clearInterval(messageInterval);\n    } else if (typeof event.data === 'object') {\n      if (event.data.reload) {\n        this.reload();\n      }\n    }\n  }\n\n  /**\n   * reloads the iframe (or parent page) in case of a server request\n   */\n  reload() {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('GET', baseWebUrl + serviceRelativeUrl + this.hash, true);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      try {\n        const response = JSON.parse(xhr.responseText);\n\n        if (response.status) {\n          server = response.address;\n          const address = protocol + server + '/' + this.hash + '/';\n\n          if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n            this.iframeElement.nativeElement.src = address;\n          } else {\n            this.iframeElement.nativeElement.location.href = address;\n          }\n\n          this.instantiateQuery();\n        }\n      } catch (e) {\n        location.reload();\n      }\n    };\n\n    xhr.send();\n  }\n\n  /**\n   * starts [repeatedly] trying to connect to the chat using postMessage\n   */\n  instantiateQuery() {\n    messageInterval = setInterval(this.query.bind(this), 1000);\n  }\n\n  /**\n   * instantiate a postMessage connection with the chat\n   */\n  query() {\n    try {\n      let target;\n      let origin;\n\n      if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n        target = this.iframeElement.nativeElement.contentWindow;\n        origin = protocol + server;\n      } else {\n        target = this.iframeElement.nativeElement;\n        origin = baseWebUrl;\n      }\n\n      target.postMessage('toolbar', origin);\n    } catch (ignore) {}\n  }\n\n  /**\n   * checks if the given origin is of a chat service\n   * @param origin - the URL of the origin\n   * returns boolean\n   */\n  validateOrigin(origin): boolean {\n    return /^https:\\/\\/.+\\.rumbletalk\\.(net|com)(:4433)?$/.test(origin);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxRumbletalkComponent } from './ngx-rumbletalk.component';\n\n@NgModule({\n  declarations: [NgxRumbletalkComponent],\n  imports: [HttpClientModule],\n  exports: [NgxRumbletalkComponent]\n})\nexport class NgxRumbletalkModule {}\n"]}