{"version":3,"sources":["ng://ngx-rumbletalk/lib/ngx-rumbletalk.service.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.component.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.module.ts"],"names":["NgxRumbletalkService","Injectable","args","providedIn","messageInterval","protocol","baseWebUrl","server","NgxRumbletalkComponent","Object","defineProperty","prototype","this","sanitizer","bypassSecurityTrustResourceUrl","src","ngOnInit","addListeners","instantiateQuery","window","addEventListener","info","reload","_this","xhr","XMLHttpRequest","open","hash","onreadystatechange","readyState","response","JSON","parse","responseText","status","address","iframeElement","nativeElement","HTMLIFrameElement","location","href","e","send","setInterval","query","origin_1","target","contentWindow","postMessage","ignore","validateOrigin","origin","test","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","DomSanitizer","ViewChild","Input","event","isFinite","data","clearInterval","NgxRumbletalkModule","NgModule","declarations","imports","exports"],"mappings":"kWAAA,IAAAA,uBAECC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,uJAIZ,SAAAH,SCOEI,EAJEC,EAAW,WACXC,EAAa,8BAEfC,EAAS,gCAGbC,GAgBEC,OAAAC,eAAIF,EAAAG,UAAA,UAAO,KAAX,WACE,OAAOC,KAAKC,UAAUC,+BAA+BF,KAAKG,sCAG5DP,EAAAG,UAAAK,SAAA,WACEJ,KAAKK,eACLL,KAAKM,oBAMPV,EAAAG,UAAAM,aAAA,WACEE,OAAOC,iBAAiB,UAAWR,KAAKS,MAAM,IAoBhDb,EAAAG,UAAAW,OAAA,WAAA,IAAAC,EAAAX,KACQY,EAAM,IAAIC,eAEhBD,EAAIE,KAAK,MAAOpB,EAxDO,2BAwD2BM,KAAKe,MAAM,GAE7DH,EAAII,mBAAkB,WACpB,GAAuB,IAAnBJ,EAAIK,WAIR,QACQC,EAAWC,KAAKC,MAAMR,EAAIS,cAEhC,GAAIH,EAASI,OAAQ,CACnB3B,EAASuB,EAASK,YACZA,EAAU9B,EAAWE,EAAS,IAAMgB,EAAKI,KAAO,IAElDJ,EAAKa,cAAcC,yBAAyBC,kBAC9Cf,EAAKa,cAAcC,cAActB,IAAMoB,EAEvCZ,EAAKa,cAAcC,cAAcE,SAASC,KAAOL,EAGnDZ,EAAKL,oBAEP,MAAOuB,GACPF,SAASjB,WAIbE,EAAIkB,QAMNlC,EAAAG,UAAAO,iBAAA,WAAA,IAAAK,EAAAX,KACER,EAAkBuC,YAAW,WAC3BpB,EAAKqB,SACJ,MAMLpC,EAAAG,UAAAiC,MAAA,WACE,QAEMC,EADAC,OAAM,EAKRD,EAFEjC,KAAKwB,cAAcC,yBAAyBC,mBAC9CQ,EAASlC,KAAKwB,cAAcC,cAAcU,cACjC1C,EAAWE,IAEpBuC,EAASlC,KAAKwB,cAAcC,cACnB/B,GAGXwC,EAAOE,YAAY,UAAWH,GAC9B,MAAOI,MAQXzC,EAAAG,UAAAuC,eAAA,SAAeC,GACb,MAAO,gDAAgDC,KAAKD,wBArH/DE,EAAAA,UAASnD,KAAA,CAAC,CACToD,SAAU,iBACVC,SAAA,wKAEAC,gBAAiBC,EAAAA,wBAAwBC,oJAZlCC,EAAAA,uDAeNC,EAAAA,UAAS1D,KAAA,CAAC,uBACV2D,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,oBACAA,EAAAA,SA2GHrD,GAzGE,SAAAA,EAAoBK,GAApB,IAAAU,EAAAX,KAAoBA,KAAAC,UAAAA,EAsBpBD,KAAAS,KAAI,SAAGyC,GACDC,SAASD,EAAME,MACjBC,cAAc7D,GACiB,iBAAf0D,EAAME,MAClBF,EAAME,KAAK1C,QACbC,EAAKD,UCzDb,IAAA4C,uBAGCC,EAAAA,SAAQjE,KAAA,CAAC,CACRkE,aAAc,CAAC5D,GACf6D,QAAS,GAETC,QAAS,CAAC9D,OAEuB0D,GANnC,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxRumbletalkService {\n\n  constructor() { }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nconst protocol = 'https://';\nconst baseWebUrl = 'https://www.rumbletalk.com/';\nconst serviceRelativeUrl = 'client/service.php?hash=';\nlet server = 'stagging5.rumbletalk.net:4433';\nlet messageInterval: any;\n\n@Component({\n  selector: 'ngx-rumbletalk',\n  templateUrl: './ngx-rumbletalk.component.html',\n  styleUrls: ['./ngx-rumbletalk.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxRumbletalkComponent implements OnInit {\n  @ViewChild('iframe') iframeElement: ElementRef;\n  @Input() public src: string;\n  @Input() public floating: boolean;\n  @Input() public width: string;\n  @Input() public height: string;\n  @Input() public hash: string;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  get safeSrc(): any {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(this.src);\n  }\n\n  ngOnInit() {\n    this.addListeners();\n    this.instantiateQuery();\n  }\n\n  /**\n   * add the event listeners based on the embed type and device\n   */\n  addListeners(): void {\n    window.addEventListener('message', this.info, false);\n  }\n\n  /**\n   * handles postMessage requests\n   * @param event - the event object\n   */\n  info = event => {\n    if (isFinite(event.data)) {\n      clearInterval(messageInterval);\n    } else if (typeof event.data === 'object') {\n      if (event.data.reload) {\n        this.reload();\n      }\n    }\n  };\n\n  /**\n   * reloads the iframe (or parent page) in case of a server request\n   */\n  reload() {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('GET', baseWebUrl + serviceRelativeUrl + this.hash, true);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      try {\n        const response = JSON.parse(xhr.responseText);\n\n        if (response.status) {\n          server = response.address;\n          const address = protocol + server + '/' + this.hash + '/';\n\n          if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n            this.iframeElement.nativeElement.src = address;\n          } else {\n            this.iframeElement.nativeElement.location.href = address;\n          }\n\n          this.instantiateQuery();\n        }\n      } catch (e) {\n        location.reload();\n      }\n    };\n\n    xhr.send();\n  }\n\n  /**\n   * starts [repeatedly] trying to connect to the chat using postMessage\n   */\n  instantiateQuery() {\n    messageInterval = setInterval(() => {\n      this.query();\n    }, 1000);\n  }\n\n  /**\n   * instantiate a postMessage connection with the chat\n   */\n  query() {\n    try {\n      let target;\n      let origin;\n\n      if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n        target = this.iframeElement.nativeElement.contentWindow;\n        origin = protocol + server;\n      } else {\n        target = this.iframeElement.nativeElement;\n        origin = baseWebUrl;\n      }\n\n      target.postMessage('toolbar', origin);\n    } catch (ignore) {}\n  }\n\n  /**\n   * checks if the given origin is of a chat service\n   * @param origin - the URL of the origin\n   * returns boolean\n   */\n  validateOrigin(origin): boolean {\n    return /^https:\\/\\/.+\\.rumbletalk\\.(net|com)(:4433)?$/.test(origin);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxRumbletalkComponent } from './ngx-rumbletalk.component';\n\n@NgModule({\n  declarations: [NgxRumbletalkComponent],\n  imports: [\n  ],\n  exports: [NgxRumbletalkComponent]\n})\nexport class NgxRumbletalkModule { }\n"]}