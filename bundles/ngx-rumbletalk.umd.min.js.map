{"version":3,"sources":["ng://ngx-rumbletalk/lib/ngx-rumbletalk.service.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.component.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.module.ts"],"names":["NgxRumbletalkService","prototype","address","hash","this","http","get","pipe","map","data","reload","url","Injectable","args","providedIn","HttpClient","server","messageInterval","protocol","baseWebUrl","NgxRumbletalkComponent","ngOnInit","_this","service","subscribe","iframeElement","nativeElement","src","addListeners","instantiateQuery","ngOnDestroy","clearInterval","window","addEventListener","info","bind","event","isFinite","res","status","HTMLIFrameElement","location","href","ignore","setInterval","query","origin_1","target","contentWindow","postMessage","validateOrigin","origin","test","Component","selector","template","changeDetection","ChangeDetectionStrategy","OnPush","ViewChild","Input","NgxRumbletalkModule","NgModule","declarations","imports","HttpClientModule","exports"],"mappings":"kZAAA,IAAAA,GAWEA,EAAAC,UAAAC,QAAA,SAAQC,GACN,OAAOC,KAAKC,KACTC,IAAY,sDAAsDH,GAClEI,KAAKC,EAAAA,IAAG,SAACC,GAAQ,OAAAA,EAAc,YAGpCT,EAAAC,UAAAS,OAAA,SAAOC,GACL,OAAOP,KAAKC,KAAKC,IAASK,wBAb7BC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,oDALLC,EAAAA,4IAQP,SAAAf,EAAoBK,GAAAD,KAAAC,KAAAA,MCKlBW,EACAC,EAJEC,EAAW,WACXC,EAAa,8BAKnBC,GAeEA,EAAAnB,UAAAoB,SAAA,WAAA,IAAAC,EAAAlB,KACEA,KAAKmB,QAAQrB,QAAQE,KAAKD,MAAMqB,UAAS,SAACtB,GACxCc,EAASd,EACToB,EAAKG,cAAcC,cAAcC,IAAM,WAAWzB,EAAO,IAAIoB,EAAKnB,KAAI,IACtEmB,EAAKM,eACLN,EAAKO,sBAITT,EAAAnB,UAAA6B,YAAA,WACEC,cAAcd,IAMhBG,EAAAnB,UAAA2B,aAAA,WACEI,OAAOC,iBAAiB,UAAW7B,KAAK8B,KAAKC,KAAK/B,OAAO,IAO3DgB,EAAAnB,UAAAiC,KAAA,SAAKE,GACCC,SAASD,EAAM3B,MACjBsB,cAAcd,GACiB,iBAAfmB,EAAM3B,MAClB2B,EAAM3B,KAAKC,QACbN,KAAKM,UAQXU,EAAAnB,UAAAS,OAAA,WAAA,IAAAY,EAAAlB,KACQO,EAASQ,EAzDQ,2BAyD0Bf,KAAKD,KAEtDC,KAAKmB,QAAQb,OAAOC,GAAKa,UAAS,SAChCc,GACE,GAAIA,EAAIC,OAAQ,CACdvB,EAASsB,EAAIpC,YACPA,EAAagB,EAAWF,EAAM,IAAIM,EAAKnB,KAAI,IAE7CmB,EAAKG,cAAcC,yBAAyBc,kBAC9ClB,EAAKG,cAAcC,cAAcC,IAAMzB,EAEvCoB,EAAKG,cAAcC,cAAce,SAASC,KAAOxC,EAGnDoB,EAAKO,qBAER,SACDc,GAAU,OAAAF,SAAS/B,YAOvBU,EAAAnB,UAAA4B,iBAAA,WACEZ,EAAkB2B,YAAYxC,KAAKyC,MAAMV,KAAK/B,MAAO,MAMvDgB,EAAAnB,UAAA4C,MAAA,WACE,QAEMC,EADAC,OAAM,EAKRD,EAFE1C,KAAKqB,cAAcC,yBAAyBc,mBAC9CO,EAAS3C,KAAKqB,cAAcC,cAAcsB,cACjC9B,EAAWF,IAEpB+B,EAAS3C,KAAKqB,cAAcC,cACnBP,GAGX4B,EAAOE,YAAY,UAAWH,GAC9B,MAAOH,MAQXvB,EAAAnB,UAAAiD,eAAA,SAAeC,GACb,MAAO,gDAAgDC,KAAKD,wBA3G/DE,EAAAA,UAASxC,KAAA,CAAC,CACTyC,SAAU,iBACVC,SAAA,mJAEAC,gBAAiBC,EAAAA,wBAAwBC,oJArBlC1D,4CAwBN2D,EAAAA,UAAS9C,KAAA,CAAC,4BACV+C,EAAAA,qBACAA,EAAAA,sBACAA,EAAAA,oBACAA,EAAAA,SAkGHxC,GAhGE,SAAAA,EAAoBG,GAAAnB,KAAAmB,QAAAA,EC9BtB,IAAAsC,uBAICC,EAAAA,SAAQjD,KAAA,CAAC,CACRkD,aAAc,CAAC3C,GACf4C,QAAS,CAACC,EAAAA,kBACVC,QAAS,CAAC9C,OAEsByC,GALlC,SAAAA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxRumbletalkService {\n  constructor(private http: HttpClient) {}\n\n  address(hash: string): Observable<string> {\n    return this.http\n      .get<string>(`https://www.rumbletalk.com/client/service.php?hash=${hash}`)\n      .pipe(map(data => data['address']));\n  }\n\n  reload(url: string): Observable<any> {\n    return this.http.get<any>(url);\n  }\n}\n","import { NgxRumbletalkService } from './ngx-rumbletalk.service';\nimport {\n  Component,\n  OnInit,\n  OnDestroy,\n  Input,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\n\nconst protocol = 'https://';\nconst baseWebUrl = 'https://www.rumbletalk.com/';\nconst serviceRelativeUrl = 'client/service.php?hash=';\nlet server;\nlet messageInterval: any;\n\n@Component({\n  selector: 'ngx-rumbletalk',\n  templateUrl: './ngx-rumbletalk.component.html',\n  styleUrls: ['./ngx-rumbletalk.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxRumbletalkComponent implements OnInit, OnDestroy {\n  @ViewChild('iframe') iframeElement: ElementRef;\n  @Input() public floating: boolean;\n  @Input() public width: string;\n  @Input() public height: string;\n  @Input() public hash: string;\n\n  constructor(private service: NgxRumbletalkService) {}\n\n  ngOnInit() {\n    this.service.address(this.hash).subscribe(address => {\n      server = address;\n      this.iframeElement.nativeElement.src = `https://${address}/${this.hash}/`;\n      this.addListeners();\n      this.instantiateQuery();\n    });\n  }\n\n  ngOnDestroy() {\n    clearInterval(messageInterval);\n  }\n\n  /**\n   * add the event listeners based on the embed type and device\n   */\n  addListeners(): void {\n    window.addEventListener('message', this.info.bind(this), false);\n  }\n\n  /**\n   * handles postMessage requests\n   * @param event - the event object\n   */\n  info(event) {\n    if (isFinite(event.data)) {\n      clearInterval(messageInterval);\n    } else if (typeof event.data === 'object') {\n      if (event.data.reload) {\n        this.reload();\n      }\n    }\n  }\n\n  /**\n   * reloads the iframe (or parent page) in case of a server request\n   */\n  reload() {\n    const url = `${baseWebUrl}${serviceRelativeUrl}${this.hash}`;\n\n    this.service.reload(url).subscribe(\n      res => {\n        if (res.status) {\n          server = res.address;\n          const address = `${protocol}${server}/${this.hash}/`;\n\n          if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n            this.iframeElement.nativeElement.src = address;\n          } else {\n            this.iframeElement.nativeElement.location.href = address;\n          }\n\n          this.instantiateQuery();\n        }\n      },\n      ignore => location.reload()\n    );\n  }\n\n  /**\n   * starts [repeatedly] trying to connect to the chat using postMessage\n   */\n  instantiateQuery() {\n    messageInterval = setInterval(this.query.bind(this), 1000);\n  }\n\n  /**\n   * instantiate a postMessage connection with the chat\n   */\n  query() {\n    try {\n      let target;\n      let origin;\n\n      if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n        target = this.iframeElement.nativeElement.contentWindow;\n        origin = protocol + server;\n      } else {\n        target = this.iframeElement.nativeElement;\n        origin = baseWebUrl;\n      }\n\n      target.postMessage('toolbar', origin);\n    } catch (ignore) {}\n  }\n\n  /**\n   * checks if the given origin is of a chat service\n   * @param origin - the URL of the origin\n   * returns boolean\n   */\n  validateOrigin(origin): boolean {\n    return /^https:\\/\\/.+\\.rumbletalk\\.(net|com)(:4433)?$/.test(origin);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxRumbletalkComponent } from './ngx-rumbletalk.component';\n\n@NgModule({\n  declarations: [NgxRumbletalkComponent],\n  imports: [HttpClientModule],\n  exports: [NgxRumbletalkComponent]\n})\nexport class NgxRumbletalkModule {}\n"]}