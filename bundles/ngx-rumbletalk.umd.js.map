{"version":3,"file":"ngx-rumbletalk.umd.js.map","sources":["ng://ngx-rumbletalk/lib/ngx-rumbletalk.service.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.component.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxRumbletalkService {\n  constructor(private http: HttpClient) {}\n\n  address(hash: string): Observable<string> {\n    return this.http\n      .get<string>(`https://www.rumbletalk.com/client/service.php?hash=${hash}`)\n      .pipe(map(data => data['address']));\n  }\n}\n","import { NgxRumbletalkService } from './ngx-rumbletalk.service';\nimport {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\n// import { DomSanitizer } from '@angular/platform-browser';\n\nconst protocol = 'https://';\nconst baseWebUrl = 'https://www.rumbletalk.com/';\nconst serviceRelativeUrl = 'client/service.php?hash=';\n// const server = 'stagging5.rumbletalk.net:4433';\nlet server;\nlet messageInterval: any;\n\n@Component({\n  selector: 'ngx-rumbletalk',\n  templateUrl: './ngx-rumbletalk.component.html',\n  styleUrls: ['./ngx-rumbletalk.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxRumbletalkComponent implements OnInit {\n  @ViewChild('iframe') iframeElement: ElementRef;\n  // @Input() public src: string;\n  @Input() public floating: boolean;\n  @Input() public width: string;\n  @Input() public height: string;\n  @Input() public hash: string;\n\n  // constructor(private sanitizer: DomSanitizer) {}\n  constructor(private service: NgxRumbletalkService) {}\n\n  // get safeSrc(): any {\n  //   return this.sanitizer.bypassSecurityTrustResourceUrl(this.src);\n  // }\n\n  ngOnInit() {\n    this.service.address(this.hash).subscribe(address => {\n      server = address;\n      this.iframeElement.nativeElement.src = `https://${address}/${this.hash}/`;\n      this.addListeners();\n      this.instantiateQuery();\n    });\n  }\n\n  /**\n   * add the event listeners based on the embed type and device\n   */\n  addListeners(): void {\n    window.addEventListener('message', this.info.bind(this), false);\n  }\n\n  /**\n   * handles postMessage requests\n   * @param event - the event object\n   */\n  info(event) {\n    if (isFinite(event.data)) {\n      clearInterval(messageInterval);\n    } else if (typeof event.data === 'object') {\n      if (event.data.reload) {\n        this.reload();\n      }\n    }\n  }\n\n  /**\n   * reloads the iframe (or parent page) in case of a server request\n   */\n  reload() {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('GET', baseWebUrl + serviceRelativeUrl + this.hash, true);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      try {\n        const response = JSON.parse(xhr.responseText);\n\n        if (response.status) {\n          server = response.address;\n          const address = protocol + server + '/' + this.hash + '/';\n\n          if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n            this.iframeElement.nativeElement.src = address;\n          } else {\n            this.iframeElement.nativeElement.location.href = address;\n          }\n\n          this.instantiateQuery();\n        }\n      } catch (e) {\n        location.reload();\n      }\n    };\n\n    xhr.send();\n  }\n\n  /**\n   * starts [repeatedly] trying to connect to the chat using postMessage\n   */\n  instantiateQuery() {\n    messageInterval = setInterval(this.query.bind(this), 1000);\n  }\n\n  /**\n   * instantiate a postMessage connection with the chat\n   */\n  query() {\n    try {\n      let target;\n      let origin;\n\n      if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n        target = this.iframeElement.nativeElement.contentWindow;\n        origin = protocol + server;\n      } else {\n        target = this.iframeElement.nativeElement;\n        origin = baseWebUrl;\n      }\n\n      target.postMessage('toolbar', origin);\n    } catch (ignore) {}\n  }\n\n  /**\n   * checks if the given origin is of a chat service\n   * @param origin - the URL of the origin\n   * returns boolean\n   */\n  validateOrigin(origin): boolean {\n    return /^https:\\/\\/.+\\.rumbletalk\\.(net|com)(:4433)?$/.test(origin);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxRumbletalkComponent } from './ngx-rumbletalk.component';\n\n@NgModule({\n  declarations: [NgxRumbletalkComponent],\n  imports: [HttpClientModule],\n  exports: [NgxRumbletalkComponent]\n})\nexport class NgxRumbletalkModule {}\n"],"names":["map","Injectable","HttpClient","Component","ChangeDetectionStrategy","ViewChild","Input","NgModule","HttpClientModule"],"mappings":"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"}
