{"version":3,"file":"ngx-rumbletalk.js.map","sources":["ng://ngx-rumbletalk/lib/ngx-rumbletalk.service.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.component.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxRumbletalkService {\n  constructor(private http: HttpClient) {}\n\n  address(hash: string): Observable<string> {\n    return this.http\n      .get<string>(`https://www.rumbletalk.com/client/service.php?hash=${hash}`)\n      .pipe(map(data => data['address']));\n  }\n\n  reload(url: string): Observable<any> {\n    return this.http.get<any>(url);\n  }\n}\n","import { NgxRumbletalkService } from './ngx-rumbletalk.service';\nimport {\n  Component,\n  OnInit,\n  OnDestroy,\n  Input,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\n\nconst protocol = 'https://';\nconst baseWebUrl = 'https://www.rumbletalk.com/';\nconst serviceRelativeUrl = 'client/service.php?hash=';\nlet server;\nlet messageInterval: any;\n\n@Component({\n  selector: 'ngx-rumbletalk',\n  templateUrl: './ngx-rumbletalk.component.html',\n  styleUrls: ['./ngx-rumbletalk.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxRumbletalkComponent implements OnInit, OnDestroy {\n  @ViewChild('iframe') iframeElement: ElementRef;\n  @Input() public floating: boolean;\n  @Input() public width: string;\n  @Input() public height: string;\n  @Input() public hash: string;\n\n  constructor(private service: NgxRumbletalkService) {}\n\n  ngOnInit() {\n    this.service.address(this.hash).subscribe(address => {\n      server = address;\n      this.iframeElement.nativeElement.src = `https://${address}/${this.hash}/`;\n      this.addListeners();\n      this.instantiateQuery();\n    });\n  }\n\n  ngOnDestroy() {\n    clearInterval(messageInterval);\n  }\n\n  /**\n   * add the event listeners based on the embed type and device\n   */\n  addListeners(): void {\n    window.addEventListener('message', this.info.bind(this), false);\n  }\n\n  /**\n   * handles postMessage requests\n   * @param event - the event object\n   */\n  info(event) {\n    if (isFinite(event.data)) {\n      clearInterval(messageInterval);\n    } else if (typeof event.data === 'object') {\n      if (event.data.reload) {\n        this.reload();\n      }\n    }\n  }\n\n  /**\n   * reloads the iframe (or parent page) in case of a server request\n   */\n  reload() {\n    const url = `${baseWebUrl}${serviceRelativeUrl}${this.hash}`;\n\n    this.service.reload(url).subscribe(\n      res => {\n        if (res.status) {\n          server = res.address;\n          const address = `${protocol}${server}/${this.hash}/`;\n\n          if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n            this.iframeElement.nativeElement.src = address;\n          } else {\n            this.iframeElement.nativeElement.location.href = address;\n          }\n\n          this.instantiateQuery();\n        }\n      },\n      ignore => location.reload()\n    );\n  }\n\n  /**\n   * starts [repeatedly] trying to connect to the chat using postMessage\n   */\n  instantiateQuery() {\n    messageInterval = setInterval(this.query.bind(this), 1000);\n  }\n\n  /**\n   * instantiate a postMessage connection with the chat\n   */\n  query() {\n    try {\n      let target;\n      let origin;\n\n      if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n        target = this.iframeElement.nativeElement.contentWindow;\n        origin = protocol + server;\n      } else {\n        target = this.iframeElement.nativeElement;\n        origin = baseWebUrl;\n      }\n\n      target.postMessage('toolbar', origin);\n    } catch (ignore) {}\n  }\n\n  /**\n   * checks if the given origin is of a chat service\n   * @param origin - the URL of the origin\n   * returns boolean\n   */\n  validateOrigin(origin): boolean {\n    return /^https:\\/\\/.+\\.rumbletalk\\.(net|com)(:4433)?$/.test(origin);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxRumbletalkComponent } from './ngx-rumbletalk.component';\n\n@NgModule({\n  declarations: [NgxRumbletalkComponent],\n  imports: [HttpClientModule],\n  exports: [NgxRumbletalkComponent]\n})\nexport class NgxRumbletalkModule {}\n"],"names":[],"mappings":"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"}
