{"version":3,"file":"ngx-rumbletalk.js.map","sources":["ng://ngx-rumbletalk/lib/ngx-rumbletalk.service.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.component.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxRumbletalkService {\n\n  constructor() { }\n}\n","import {\n  Component,\n  OnInit,\n  Input,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\n\nconst protocol = 'https://';\nconst baseWebUrl = 'https://www.rumbletalk.com/';\nconst serviceRelativeUrl = 'client/service.php?hash=';\nconst server = 'stagging5.rumbletalk.net:4433';\nvar messageInterval: any;\n\n@Component({\n  selector: 'ngx-rumbletalk',\n  templateUrl: './ngx-rumbletalk.component.html',\n  styleUrls: ['./ngx-rumbletalk.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxRumbletalkComponent implements OnInit {\n  @ViewChild('iframe') iframeElement: ElementRef;\n  @Input() public src: string;\n  @Input() public floating: boolean;\n  @Input() public width: string;\n  @Input() public height: string;\n  @Input() public hash: string;\n\n  constructor(private sanitizer: DomSanitizer) {}\n\n  get safeSrc(): any {\n    return this.sanitizer.bypassSecurityTrustResourceUrl(this.src);\n  }\n\n  ngOnInit() {\n    this.addListeners();\n    this.instantiateQuery();\n  }\n\n  /**\n   * add the event listeners based on the embed type and device\n   */\n  addListeners(): void {\n    window.addEventListener('message', this.info.bind(this), false);\n  }\n\n  /**\n   * handles postMessage requests\n   * @param event - the event object\n   */\n  info(event) {\n    if (isFinite(event.data)) {\n      clearInterval(messageInterval);\n    } else if (typeof event.data === 'object') {\n      if (event.data.reload) {\n        this.reload();\n      }\n    }\n  }\n\n  /**\n   * reloads the iframe (or parent page) in case of a server request\n   */\n  reload() {\n    const xhr = new XMLHttpRequest();\n\n    xhr.open('GET', baseWebUrl + serviceRelativeUrl + this.hash, true);\n\n    xhr.onreadystatechange = () => {\n      if (xhr.readyState !== 4) {\n        return;\n      }\n\n      try {\n        const response = JSON.parse(xhr.responseText);\n\n        if (response.status) {\n          const tempServer = response.address;\n          const address = protocol + tempServer + '/' + this.hash + '/';\n\n          if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n            this.iframeElement.nativeElement.src = address;\n          } else {\n            this.iframeElement.nativeElement.location.href = address;\n          }\n\n          this.instantiateQuery();\n        }\n      } catch (e) {\n        location.reload();\n      }\n    };\n\n    xhr.send();\n  }\n\n  /**\n   * starts [repeatedly] trying to connect to the chat using postMessage\n   */\n  instantiateQuery() {\n    messageInterval = setInterval(this.query.bind(this), 1000);\n  }\n\n  /**\n   * instantiate a postMessage connection with the chat\n   */\n  query() {\n    try {\n      let target;\n      let origin;\n\n      if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n        target = this.iframeElement.nativeElement.contentWindow;\n        origin = protocol + server;\n      } else {\n        target = this.iframeElement.nativeElement;\n        origin = baseWebUrl;\n      }\n\n      target.postMessage('toolbar', origin);\n    } catch (ignore) {}\n  }\n\n  /**\n   * checks if the given origin is of a chat service\n   * @param origin - the URL of the origin\n   * returns boolean\n   */\n  validateOrigin(origin): boolean {\n    return /^https:\\/\\/.+\\.rumbletalk\\.(net|com)(:4433)?$/.test(origin);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxRumbletalkComponent } from './ngx-rumbletalk.component';\n\n@NgModule({\n  declarations: [NgxRumbletalkComponent],\n  imports: [\n  ],\n  exports: [NgxRumbletalkComponent]\n})\nexport class NgxRumbletalkModule { }\n"],"names":[],"mappings":"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"}
