{"version":3,"file":"ngx-rumbletalk.js.map","sources":["ng://ngx-rumbletalk/lib/ngx-rumbletalk.service.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.component.ts","ng://ngx-rumbletalk/lib/ngx-rumbletalk.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxRumbletalkService {\n  constructor(private http: HttpClient) {}\n\n  address(hash: string): Observable<string> {\n    return this.http\n      .get<string>(`https://www.rumbletalk.com/client/service.php?hash=${hash}`)\n      .pipe(map(data => data['address']));\n  }\n\n  reload(url: string): Observable<any> {\n    return this.http.get<any>(url);\n  }\n}\n","import {\n  Component,\n  OnInit,\n  OnDestroy,\n  Input,\n  ChangeDetectionStrategy,\n  ViewChild,\n  ElementRef\n} from '@angular/core';\nimport { NgxRumbletalkService } from './ngx-rumbletalk.service';\n\nconst protocol = 'https://';\nconst baseWebUrl = 'https://www.rumbletalk.com/';\nconst serviceRelativeUrl = 'client/service.php?hash=';\nlet server: string;\nlet messageInterval: any;\nlet floatingToggleInterval: any;\n\n@Component({\n  selector: 'ngx-rumbletalk',\n  templateUrl: './ngx-rumbletalk.component.html',\n  styleUrls: ['./ngx-rumbletalk.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class NgxRumbletalkComponent implements OnInit, OnDestroy {\n  /** @const Object different embedding types */\n  readonly EMBED_TYPES = {\n    EMBEDDED: 0,\n    FLOATING: 1,\n    MOBILE_FULL: 2\n  };\n  readonly counterTop = 14;\n  readonly counterLeft = 23;\n\n  @ViewChild('iframe') iframeElement: ElementRef;\n  @ViewChild('chatDiv') chatDivElement: ElementRef;\n  @Input() public hash: string;\n  @Input() public side: number;\n  @Input() public embedType: number;\n  @Input() public cdn: string;\n  @Input() public floating: boolean;\n  @Input() public width: number;\n  @Input() public height: number;\n  @Input() public bounce: number;\n  @Input() public image: string;\n  @Input() public showDetails: boolean;\n\n  mobile: boolean;\n\n  constructor(private service: NgxRumbletalkService) {}\n\n  ngOnInit() {\n    const ua = navigator.userAgent.toUpperCase();\n    this.mobile =\n      ua.indexOf('MOBILE') !== -1 || ua.indexOf('ANDROID') !== -1 || ua.indexOf('IOS') !== -1;\n\n    /* if web and embed type 2, treat as embedded (0) */\n    if (!this.mobile && this.embedType === this.EMBED_TYPES.MOBILE_FULL) {\n      this.embedType = this.EMBED_TYPES.EMBEDDED;\n    }\n\n    this.service.address(this.hash).subscribe(address => {\n      server = address;\n\n      if (!this.mobile) {\n        this.iframeElement.nativeElement.src = `https://${address}/${this.hash}/`;\n      }\n\n      this.addListeners();\n      this.instantiateQuery();\n    });\n  }\n\n  ngOnDestroy() {\n    clearInterval(messageInterval);\n  }\n\n  /**\n   * add the event listeners based on the embed type and device\n   */\n  addListeners(): void {\n    window.addEventListener('message', this.info.bind(this), false);\n  }\n\n  /**\n   * handles postMessage requests\n   * @param event - the event object\n   */\n  info(event) {\n    if (isFinite(event.data)) {\n      clearInterval(messageInterval);\n    } else if (typeof event.data === 'object') {\n      if (event.data.reload) {\n        this.reload();\n      }\n    }\n  }\n\n  /**\n   * reloads the iframe (or parent page) in case of a server request\n   */\n  reload() {\n    const url = `${baseWebUrl}${serviceRelativeUrl}${this.hash}`;\n\n    this.service.reload(url).subscribe(\n      res => {\n        if (res.status) {\n          server = res.address;\n          const address = `${protocol}${server}/${this.hash}/`;\n\n          if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n            this.iframeElement.nativeElement.src = address;\n          } else {\n            this.iframeElement.nativeElement.location.href = address;\n          }\n\n          this.instantiateQuery();\n        }\n      },\n      ignore => location.reload()\n    );\n  }\n\n  /**\n   * starts [repeatedly] trying to connect to the chat using postMessage\n   */\n  instantiateQuery() {\n    messageInterval = setInterval(this.query.bind(this), 1000);\n  }\n\n  /**\n   * instantiate a postMessage connection with the chat\n   */\n  query() {\n    try {\n      let target;\n      let origin;\n\n      if (this.iframeElement.nativeElement instanceof HTMLIFrameElement) {\n        target = this.iframeElement.nativeElement.contentWindow;\n        origin = protocol + server;\n      } else {\n        target = this.iframeElement.nativeElement;\n        origin = baseWebUrl;\n      }\n\n      target.postMessage('toolbar', origin);\n    } catch (ignore) {}\n  }\n\n  /**\n   * checks if the given origin is of a chat service\n   * @param origin - the URL of the origin\n   * returns boolean\n   */\n  validateOrigin(origin): boolean {\n    return /^https:\\/\\/.+\\.rumbletalk\\.(net|com)(:4433)?$/.test(origin);\n  }\n\n  handleImageLoad(event: any): void {\n    /* image element */\n    const target = event.target;\n    /* parent div */\n    const parent = event.currentTarget.parentNode;\n\n    /* match the dimensions of the image and the wrapping div */\n    parent.style.height = `${target.height}px`;\n    parent.style.width = `${target.width}px`;\n\n    /* place the chat div right above the image */\n    if (!this.mobile) {\n      this.chatDivElement.nativeElement.style.bottom = `${target.height}px`;\n    }\n  }\n\n  /**\n   * hides or shows the floating chat\n   * @param boolean [close] - if set to true, will force hide\n   */\n  toggleFloatingChatStart(close: boolean = false): void {\n    clearInterval(floatingToggleInterval);\n    let steps = -100;\n\n    if (this.chatDivElement.nativeElement.style.visibility === 'hidden' && !close) {\n      steps *= -1;\n      this.chatDivElement.nativeElement.style.width = 0;\n      this.chatDivElement.nativeElement.style.height = 0;\n      this.chatDivElement.nativeElement.style.overflow = 'visible';\n      this.chatDivElement.nativeElement.style.visibility = 'visible';\n    }\n\n    floatingToggleInterval = setInterval(() => {\n      this.toggleFloatingChat(steps);\n    }, 1);\n  }\n\n  /**\n   * hide or display the floating chat by @steps\n   * @param number steps - the number of pixels to increment the display by\n   */\n  toggleFloatingChat(steps): void {\n    const chatDiv = this.chatDivElement.nativeElement;\n    let width = chatDiv.offsetWidth + steps;\n    let height = chatDiv.offsetHeight + steps;\n    let check = 0;\n\n    if (width < 0) {\n      width = 0;\n    }\n\n    if (height < 0) {\n      height = 0;\n    }\n\n    if (width >= 0 && height >= 0) {\n      if (width <= this.width) {\n        check = 1;\n      } else {\n        width = this.width;\n      }\n\n      if (height <= this.height) {\n        check = 1;\n      } else {\n        height = this.height;\n      }\n\n      chatDiv.style.width = width + 'px';\n      chatDiv.style.height = height + 'px';\n    }\n\n    if (!check || width <= 0 || height <= 0) {\n      clearInterval(floatingToggleInterval);\n      if (width < this.width) {\n        chatDiv.style.visibility = 'hidden';\n        chatDiv.style.overflow = 'hidden';\n      }\n    }\n  }\n\n  /**\n   * attaches the open chat event to the given target\n   * @param Element target\n   */\n  openChat(): void {\n    const link = `${baseWebUrl}client/chat.php?${this.hash}`;\n    let iframeInterval;\n    const iframe = this.iframeElement;\n\n    if (iframe) {\n      iframe.nativeElement.focus();\n    } else {\n      const tempIframe = window.open(link);\n      iframeInterval = setInterval(() => {\n        if (tempIframe.closed) {\n          clearInterval(iframeInterval);\n        }\n      }, 100);\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgxRumbletalkComponent } from './ngx-rumbletalk.component';\nimport { BrowserModule } from '@angular/platform-browser';\n\n@NgModule({\n  declarations: [NgxRumbletalkComponent],\n  imports: [HttpClientModule, BrowserModule],\n  exports: [NgxRumbletalkComponent]\n})\nexport class NgxRumbletalkModule {}\n"],"names":[],"mappings":"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"}
